// TimefoldAI v2.0 JavaScript

// API基底URL
const API_BASE = '/api';

// ページ読み込み時の初期化
document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 TimefoldAI v2.0 初期化中...');
    loadSystemStatus();
    loadAllData();
});

// システム状況の読み込み
async function loadSystemStatus() {
    try {
        const response = await fetch(`${API_BASE}/test`);
        const data = await response.json();
        
        if (data.status === 'success') {
            document.getElementById('systemStatus').innerHTML = `
                <div class="status-info">
                    <div class="status-card">
                        <div class="status-number">${data.data_summary.subjects}</div>
                        <div class="status-label">科目</div>
                    </div>
                    <div class="status-card">
                        <div class="status-number">${data.data_summary.teachers}</div>
                        <div class="status-label">教師</div>
                    </div>
                    <div class="status-card">
                        <div class="status-number">${data.data_summary.timeslots}</div>
                        <div class="status-label">時間枠</div>
                    </div>
                    <div class="status-card">
                        <div class="status-number">${data.data_summary.student_groups}</div>
                        <div class="status-label">クラス</div>
                    </div>
                </div>
                <p style="margin-top: 15px; color: #27ae60;">✅ ${data.message}</p>
            `;
        }
    } catch (error) {
        console.error('システム状況読み込みエラー:', error);
        document.getElementById('systemStatus').innerHTML = `
            <p style="color: #e74c3c;">❌ システム接続エラー</p>
        `;
    }
}

// 全データの読み込み
async function loadAllData() {
    await loadSubjects();
    await loadTeachers();
    await loadTimeslots();
    await loadLessons();
}

// 科目データの読み込み
async function loadSubjects() {
    try {
        const response = await fetch(`${API_BASE}/subjects`);
        const subjects = await response.json();
        
        const html = subjects.map(subject => `
            <div class="data-item">
                <strong>${subject.name}</strong> (${subject.code}) 
                - ${subject.category} - 週${subject.weekly_hours}時間
                <br><small>${subject.description}</small>
            </div>
        `).join('');
        
        document.getElementById('subjectsList').innerHTML = html;
    } catch (error) {
        console.error('科目データ読み込みエラー:', error);
        document.getElementById('subjectsList').innerHTML = '<p>データ読み込みエラー</p>';
    }
}

// 教師データの読み込み
async function loadTeachers() {
    try {
        const response = await fetch(`${API_BASE}/teachers`);
        const teachers = await response.json();
        
        const html = teachers.map(teacher => `
            <div class="data-item">
                <strong>${teacher.name}</strong> (${teacher.email})
                <br>担当科目: ${teacher.subjects.join(', ')}
                <br>勤務形態: ${teacher.employment_type} - 最大授業数: ${teacher.max_daily_lessons}/日
            </div>
        `).join('');
        
        document.getElementById('teachersList').innerHTML = html;
    } catch (error) {
        console.error('教師データ読み込みエラー:', error);
        document.getElementById('teachersList').innerHTML = '<p>データ読み込みエラー</p>';
    }
}

// 時間枠データの読み込み
async function loadTimeslots() {
    try {
        const response = await fetch(`${API_BASE}/timeslots`);
        const timeslots = await response.json();
        
        // 曜日別にグループ化
        const days = ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY'];
        const dayNames = ['月曜日', '火曜日', '水曜日', '木曜日', '金曜日'];
        
        let html = '';
        days.forEach((day, index) => {
            const daySlots = timeslots.filter(slot => slot.day_of_week === day);
            html += `<h4>${dayNames[index]}</h4>`;
            html += daySlots.map(slot => `
                <div class="data-item">
                    ${slot.period_name}: ${slot.start_time} - ${slot.end_time}
                </div>
            `).join('');
        });
        
        document.getElementById('timeslotsList').innerHTML = html;
    } catch (error) {
        console.error('時間枠データ読み込みエラー:', error);
        document.getElementById('timeslotsList').innerHTML = '<p>データ読み込みエラー</p>';
    }
}

// 授業データの読み込み
async function loadLessons() {
    try {
        const response = await fetch(`${API_BASE}/lessons`);
        const lessons = await response.json();
        
        const html = lessons.map(lesson => `
            <div class="data-item">
                <strong>${lesson.subject?.name || 'N/A'}</strong>
                - ${lesson.teacher?.name || 'N/A'}
                - ${lesson.student_group?.name || 'N/A'}
                <br><small>授業タイプ: ${lesson.lesson_type}</small>
            </div>
        `).join('');
        
        document.getElementById('lessonsList').innerHTML = html;
    } catch (error) {
        console.error('授業データ読み込みエラー:', error);
        document.getElementById('lessonsList').innerHTML = '<p>データ読み込みエラー</p>';
    }
}

// タブ切り替え
function showTab(tabName) {
    // 全てのタブを非表示
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelectorAll('.tab-button').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // 指定されたタブを表示
    document.getElementById(tabName).classList.add('active');
    event.target.classList.add('active');
}

// 最適化テスト（将来実装）
function testOptimization() {
    alert('🚧 最適化機能は次のフェーズで実装予定です！');
}

// データ更新
function refreshData() {
    console.log('🔄 データ更新中...');
    loadSystemStatus();
    loadAllData();
}
